<?php

include_once('fserver.features.inc');

/**
 * Implementation of hook_views_api().
 */
function fserver_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_link().
 */
function fserver_link($type, $object, $teaser = FALSE) {
  $links = array();
  if ($type == 'node' && $object->type == 'fserver_project') {
    $item = menu_get_item('node/add/fserver-release');
    if ($item && $item['access']) {
      $links['fserver-add-release'] = array(
        'title' => t('Add new @release', array('@release' => strtolower($item['title']))),
        'href' => 'node/add/fserver-release',
      );
    }
  }
  return $links;
}

/**
 * Implementation of hook_nodeapi().
 */
function fserver_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'view' && $node->type == 'fserver_project' && menu_get_object()->nid === $node->nid) {
    if (node_access('update', $node) && !empty($node->field_fserver_name[0]['safe'])) {
      $shortname = $node->field_fserver_name[0]['safe'];
      $node->content['project_info'] = array(
        '#value' => theme('fserver_project_info', $shortname),
        '#weight' => -10,
      );
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function fserver_theme() {
  return array(
    'fserver_project_info' => array('arguments' => array('shortname' => NULL)),
  );
}

/**
 * Display project feed information.
 */
function theme_fserver_project_info($name) {
  $header = array(array('data' => t('Update XML feeds'), 'colspan' => 2));
  $rows = array();
  $rows[] = array(t('Update XML'), l(url("fserver", array('purl' => array('disabled' => TRUE), 'absolute' => TRUE)), "fserver"));
  foreach (fserver_cck_options('core') as $branch) {
    $rows[] = array(t('Drupal-!branch', array('!branch' => $branch)), l(url("fserver/{$name}/{$branch}", array('purl' => array('disabled' => TRUE), 'absolute' => TRUE)), "fserver/{$name}/{$branch}"));
  }
  $rows[] = array(array(
    'data' => "<div class='description'>". t('Add the Update XML URL to this feature\'s info file to enable updates from this site.') ."</div>",
    'colspan' => 2,
  ));
  return theme('table', $header, $rows, array('class' => 'fserver-project-info'));
}

/**
 * Option field callback for version options.
 */
function fserver_cck_options($type = 'core') {
  switch ($type) {
    case 'core':
      return array('5.x' => '5.x', '6.x' => '6.x', '7.x' => '7.x');

    case 'major':
      $major = range(0,50);
      unset($major[0]);
      return $major;

    case 'patch':
      return range(0,50);

    case 'recommended':
      return array(0 => t('Not recommended'), 1 => t('Recommended'));

    case 'security':
      return array(0 => t('Not a security release'), 1 => ('Security release'));
  }
}

/**
 * Parse a package name into values: core, major, patch and extra.
 */
function fserver_parse_package_name($package_filename) {
  // example: fserver-6.x-2.0-rc3.tar.gz
  if (preg_match('/^(?<project>\w+)-(?<core>\d+\.x)-(?<major>\d+)\.(?<patch>\d+)-?(?<extra>\w+)?\.(tar\.gz|tgz)$/', $package_filename, $matches)) {
    return $matches;
  };

  return array();
}

/**
 * Implementation of hook_form_alter().
 */
 /*
function fserver_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#id']) && $form['#id'] == 'node-form' && !isset($form['#node']->cck_dummy_node_form) &&$form['#node']->type = 'fserver-release') {
    $form['fserver_version_autodetect'] = array(
      '#type' => 'button',
      '#value' => t('Autodetect version settings'),
      '#weight' => $form['#content_extra_fields']['title']['weight'],
    );
  }
}
*/